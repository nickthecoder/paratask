# Generated by : paratask generateCompletion --commandName paratask
# Copy to /etc/bash_completion.d/paratask for system wide tab-completion of paratask commands.

_parataskFileComplete()
{
    complete -F _parataskComplete paratask
    return 0
}

_parataskComplete()
{
    local taskName cur prev
    COMPREPLY=()
    _get_comp_words_by_ref cur prev

    if [ "${COMP_CWORD}" == 1 ]
    then
        COMPREPLY=( $( compgen -W 'codeHeader command copyFiles createDirectory customToolList directory editor emptyTrash find flipImage generateCompletion generateTaskCompletion git gitCommit gitCommittedFiles gitLog gitRM gitStash gitStatus grep groovy home imageViewer locate mount moveFiles moveToTrash mythRecorded options optionsFiles places placesDirectory placesList processes project python renameFile resizeImage restoreFiles rotateImage searchAndReplace shortcuts ssh terminal trash web' -- $cur ) )
    else
        taskName=${COMP_WORDS[1]}
        case $taskName in
            codeHeader)

    if [[ "$prev" == --* ]] && [[ "${prev}" != --showProcessedFiles ]] ; then
    case $prev in
        --directories)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--directories --extensions --showProcessedFiles --depth --headerTest --withinLines --headerText' -- $cur) )
        return 0
    fi
                ;;

            command)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --output)
            COMPREPLY=( $( compgen -W 'INHERRIT WINDOW IGNORE' -- $cur) )
            return 0
            ;;
        --directory)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--program --arguments --directory --output' -- $cur) )
        return 0
    fi
                ;;

            copyFiles)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --files)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
        --toDirectory)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--files --toDirectory' -- $cur) )
        return 0
    fi
                ;;

            createDirectory)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --parentDirectory)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--parentDirectory --directoryName' -- $cur) )
        return 0
    fi
                ;;

            customToolList)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --toolbar)
            COMPREPLY=( $( compgen -W 'null TOP BOTTOM LEFT RIGHT' -- $cur) )
            return 0
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--toolbar --tools' -- $cur) )
        return 0
    fi
                ;;

            directory)

    if [[ "$prev" == --* ]] && [[ "${prev}" != --includeHidden ]] ; then
    case $prev in
        --foldSingleDirectories|--autoRefresh)
            COMPREPLY=( $( compgen -W 'true false' -- $cur) )
            return 0
            ;;
        --onlyFiles)
            COMPREPLY=( $( compgen -W 'true false null' -- $cur) )
            return 0
            ;;
        --placesFile)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
        --treeRoot|--directories)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--directories --treeRoot --placesFile --onlyFiles --extensions --includeHidden --foldSingleDirectories --thumbnailHeight --directoryThumbnail --autoRefresh' -- $cur) )
        return 0
    fi
                ;;

            editor)

    if [[ "$prev" == --* ]] && [[ "${prev}" != --ignoreFileSizeCheck ]] && [[ "${prev}" != --matchCase ]] && [[ "${prev}" != --useRegex ]] ; then
    case $prev in
        --file)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--file --ignoreFileSizeCheck --initialText --goToLine --findText --matchCase --useRegex' -- $cur) )
        return 0
    fi
                ;;

            emptyTrash)

    if [[ "$prev" == --* ]] ; then
        # No choice or file parameters
        COMPREPLY=()
    else
        COMPREPLY=( $( compgen -W '--daysAgo' -- $cur) )
        return 0
    fi
                ;;

            find)

    if [[ "$prev" == --* ]] && [[ "${prev}" != --wholeName ]] && [[ "${prev}" != --emptyFiles ]] && [[ "${prev}" != --followSymlinks ]] ; then
    case $prev in
        --typeFollowsSymlink|--otherFileSystems)
            COMPREPLY=( $( compgen -W 'true false' -- $cur) )
            return 0
            ;;
        --matchType)
            COMPREPLY=( $( compgen -W 'GLOB_CASE_SENSITIVE GLOB_CASE_INSENSITIVE REGEX_CASE_SENSITIVE REGEX_CASE_INSENSITIVE' -- $cur) )
            return 0
            ;;
        --type)
            COMPREPLY=( $( compgen -W 'any f d l s p b c' -- $cur) )
            return 0
            ;;
        --newerThanFile)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
        --directory)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--directory --filename --matchType --wholeName --user --group --type --typeFollowsSymlink --emptyFiles --newerThanFile --followSymlinks --otherFileSystems --minDepth --maxDepth --thumbnailHeight' -- $cur) )
        return 0
    fi
                ;;

            flipImage)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --direction)
            COMPREPLY=( $( compgen -W 'x y' -- $cur) )
            return 0
            ;;
        --output)
            COMPREPLY=( $( compgen -W 'INHERRIT WINDOW IGNORE' -- $cur) )
            return 0
            ;;
        --inputFile|--outputFile)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--inputFile --direction --outputFile --output' -- $cur) )
        return 0
    fi
                ;;

            generateCompletion)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --output)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--commandName --output' -- $cur) )
        return 0
    fi
                ;;

            generateTaskCompletion)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --taskOrTaskString_choice)
            COMPREPLY=( $( compgen -W '' -- $cur) )
            return 0
            ;;
        --output)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--taskOrTaskString --taskOrTaskString_choice --taskString --task --commandName --output' -- $cur) )
        return 0
    fi
                ;;

            git)

    if [[ "$prev" == --* ]] && [[ "${prev}" != --matchCase ]] ; then
    case $prev in
        --merges)
            COMPREPLY=( $( compgen -W 'true false null' -- $cur) )
            return 0
            ;;
        --grepType)
            COMPREPLY=( $( compgen -W 'regular extended fixed perl' -- $cur) )
            return 0
            ;;
        --directory)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--directory --maxItems --grep --grepType --merges --matchCase --since --until' -- $cur) )
        return 0
    fi
                ;;

            gitCommit)

    if [[ "$prev" == --* ]] && [[ "${prev}" != --all ]] ; then
    case $prev in
        --output)
            COMPREPLY=( $( compgen -W 'INHERRIT WINDOW IGNORE' -- $cur) )
            return 0
            ;;
        --directory)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--message --all --directory --output' -- $cur) )
        return 0
    fi
                ;;

            gitCommittedFiles)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --directory)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--directory --commit --compareTo' -- $cur) )
        return 0
    fi
                ;;

            gitLog)

    if [[ "$prev" == --* ]] && [[ "${prev}" != --matchCase ]] ; then
    case $prev in
        --merges)
            COMPREPLY=( $( compgen -W 'true false null' -- $cur) )
            return 0
            ;;
        --grepType)
            COMPREPLY=( $( compgen -W 'regular extended fixed perl' -- $cur) )
            return 0
            ;;
        --directory)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--directory --maxItems --grep --grepType --merges --matchCase --since --until' -- $cur) )
        return 0
    fi
                ;;

            gitRM)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --option)
            COMPREPLY=( $( compgen -W 'none -f --cache' -- $cur) )
            return 0
            ;;
        --files)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
        --directory)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--directory --files --option' -- $cur) )
        return 0
    fi
                ;;

            gitStash)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --directory)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--directory' -- $cur) )
        return 0
    fi
                ;;

            gitStatus)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --directory)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--directory' -- $cur) )
        return 0
    fi
                ;;

            grep)

    if [[ "$prev" == --* ]] && [[ "${prev}" != --matchCase ]] && [[ "${prev}" != --invertResults ]] && [[ "${prev}" != --followSymLinks ]] ; then
    case $prev in
        --type)
            COMPREPLY=( $( compgen -W 'regular extended fixed perl' -- $cur) )
            return 0
            ;;
        --part)
            COMPREPLY=( $( compgen -W 'any word line' -- $cur) )
            return 0
            ;;
        --output)
            COMPREPLY=( $( compgen -W 'INHERRIT WINDOW IGNORE' -- $cur) )
            return 0
            ;;
        --filesOrDirectories)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--filesOrDirectories --patterns --matchCase --type --part --invertResults --followSymLinks --maxMatches --contextLines --additionalOptions --output' -- $cur) )
        return 0
    fi
                ;;

            groovy)

    if [[ "$prev" == --* ]] ; then
        # No choice or file parameters
        COMPREPLY=()
    else
        COMPREPLY=( $( compgen -W '' -- $cur) )
        return 0
    fi
                ;;

            home)

    if [[ "$prev" == --* ]] ; then
        # No choice or file parameters
        COMPREPLY=()
    else
        COMPREPLY=( $( compgen -W '' -- $cur) )
        return 0
    fi
                ;;

            imageViewer)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --file)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--file' -- $cur) )
        return 0
    fi
                ;;

            locate)

    if [[ "$prev" == --* ]] && [[ "${prev}" != --checkFileExists ]] && [[ "${prev}" != --regularExpressions ]] && [[ "${prev}" != --caseSensitive ]] ; then
        # No choice or file parameters
        COMPREPLY=()
    else
        COMPREPLY=( $( compgen -W '--pattern --matchWholePath --checkFileExists --regularExpressions --caseSensitive --maxItems' -- $cur) )
        return 0
    fi
                ;;

            mount)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --toolbar)
            COMPREPLY=( $( compgen -W 'null TOP BOTTOM LEFT RIGHT' -- $cur) )
            return 0
            ;;
        --buttonText)
            COMPREPLY=( $( compgen -W 'DIRECTORY_PATH DIRECTORY_NAME LABEL' -- $cur) )
            return 0
            ;;
        --excludeMountPoints)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--toolbar --buttonText --excludeFSTypes --excludeMountPoints' -- $cur) )
        return 0
    fi
                ;;

            moveFiles)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --files)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
        --toDirectory)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--files --toDirectory' -- $cur) )
        return 0
    fi
                ;;

            moveToTrash)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --files)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--files' -- $cur) )
        return 0
    fi
                ;;

            mythRecorded)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --directory)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--server --database --user --password --directory' -- $cur) )
        return 0
    fi
                ;;

            options)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --directory)
            COMPREPLY=( $( compgen -W '/home/nick/projects/paratask/src/dist/options /home/nick/.config/paratask/options' -- $cur) )
            return 0
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--optionsName --directory' -- $cur) )
        return 0
    fi
                ;;

            optionsFiles)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --directory)
            COMPREPLY=( $( compgen -W ' /home/nick/projects/paratask/src/dist/options /home/nick/.config/paratask/options' -- $cur) )
            return 0
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--directory' -- $cur) )
        return 0
    fi
                ;;

            places)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --toolbar)
            COMPREPLY=( $( compgen -W 'null TOP BOTTOM LEFT RIGHT' -- $cur) )
            return 0
            ;;
        --files)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--files --toolbar' -- $cur) )
        return 0
    fi
                ;;

            placesDirectory)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --file)
            COMPREPLY=( $( compgen -W 'Computer Gidea Gnome Extensions Gnome Places goko Home paratask People Projects Server Home Settings TV Shows' -- $cur) )
            return 0
            ;;
        --directory)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--directory --file' -- $cur) )
        return 0
    fi
                ;;

            placesList)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --toolbar)
            COMPREPLY=( $( compgen -W 'null TOP BOTTOM LEFT RIGHT' -- $cur) )
            return 0
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--toolbar --files' -- $cur) )
        return 0
    fi
                ;;

            processes)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --filter_choice)
            COMPREPLY=( $( compgen -W '' -- $cur) )
            return 0
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--filter --filter_choice --command --user --group --pids' -- $cur) )
        return 0
    fi
                ;;

            project)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --projectFiles)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
        --directory|--optionsPath)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--directory --projects --projectFiles --optionsPath' -- $cur) )
        return 0
    fi
                ;;

            python)

    if [[ "$prev" == --* ]] ; then
        # No choice or file parameters
        COMPREPLY=()
    else
        COMPREPLY=( $( compgen -W '--version' -- $cur) )
        return 0
    fi
                ;;

            renameFile)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --file)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--file --newName' -- $cur) )
        return 0
    fi
                ;;

            resizeImage)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --keepAspectRatio)
            COMPREPLY=( $( compgen -W 'true false' -- $cur) )
            return 0
            ;;
        --resizeOptions_choice)
            COMPREPLY=( $( compgen -W '' -- $cur) )
            return 0
            ;;
        --output)
            COMPREPLY=( $( compgen -W 'INHERRIT WINDOW IGNORE' -- $cur) )
            return 0
            ;;
        --inputFile|--outputFile)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--inputFile --resizeOptions --resizeOptions_choice --width --height --keepAspectRatio --percentage --outputFile --output' -- $cur) )
        return 0
    fi
                ;;

            restoreFiles)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --files)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--files' -- $cur) )
        return 0
    fi
                ;;

            rotateImage)

    if [[ "$prev" == --* ]] ; then
    case $prev in
        --rotation)
            COMPREPLY=( $( compgen -W '0 90 180 -90' -- $cur) )
            return 0
            ;;
        --output)
            COMPREPLY=( $( compgen -W 'INHERRIT WINDOW IGNORE' -- $cur) )
            return 0
            ;;
        --inputFile|--outputFile)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--inputFile --rotation --outputFile --output' -- $cur) )
        return 0
    fi
                ;;

            searchAndReplace)

    if [[ "$prev" == --* ]] && [[ "${prev}" != --useRegex ]] ; then
    case $prev in
        --matchCase)
            COMPREPLY=( $( compgen -W 'true false' -- $cur) )
            return 0
            ;;
        --files)
            complete -F _parataskFileComplete -o default paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--files --searchString --replaceString --useRegex --matchCase' -- $cur) )
        return 0
    fi
                ;;

            shortcuts)

    if [[ "$prev" == --* ]] ; then
        # No choice or file parameters
        COMPREPLY=()
    else
        COMPREPLY=( $( compgen -W '' -- $cur) )
        return 0
    fi
                ;;

            ssh)

    if [[ "$prev" == --* ]] ; then
        # No choice or file parameters
        COMPREPLY=()
    else
        COMPREPLY=( $( compgen -W '--user --host --xForwarding --command' -- $cur) )
        return 0
    fi
                ;;

            terminal)

    if [[ "$prev" == --* ]] && [[ "${prev}" != --closeWhenFinished ]] ; then
    case $prev in
        --directory)
            complete -F _parataskFileComplete -o dirnames paratask
            return 124
            ;;
    esac
    else
        COMPREPLY=( $( compgen -W '--program --arguments --directory --title --closeWhenFinished' -- $cur) )
        return 0
    fi
                ;;

            trash)

    if [[ "$prev" == --* ]] ; then
        # No choice or file parameters
        COMPREPLY=()
    else
        COMPREPLY=( $( compgen -W '' -- $cur) )
        return 0
    fi
                ;;

            web)

    if [[ "$prev" == --* ]] ; then
        # No choice or file parameters
        COMPREPLY=()
    else
        COMPREPLY=( $( compgen -W '--address' -- $cur) )
        return 0
    fi
                ;;

        esac
        
    fi
}

complete -F _parataskComplete paratask
