package uk.co.nickthecoder.paratask

import uk.co.nickthecoder.paratask.parameters.*
import uk.co.nickthecoder.paratask.util.child
import uk.co.nickthecoder.paratask.util.currentDirectory
import java.io.PrintStream

/**
 * Generates a bash script suitable for adding to /etc/bash_completion.d
 *
 * See Gnu's documentation on how command completion works :
 * https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html
 */
class GenerateCompletionTask : AbstractTask() {

    val commandNameP = StringParameter("commandName", value = "paratask")
    val commandName by commandNameP

    val outputFileP = FileParameter("output", expectFile = true, mustExist = null,
            value = currentDirectory.child("src", "dist", "bash_complete.d", "paratask-static"))

    override val taskD = TaskDescription("generateCompletion")
            .addParameters(commandNameP, outputFileP)

    lateinit var out: PrintStream

    override fun run() {
        if (outputFileP.value == null) {
            out = System.out
        } else {
            out = PrintStream(outputFileP.value)
        }
        try {
            out.println("# Generated by : paratask ${taskD.name} --commandName ${commandName}")
            out.println("# Copy to /etc/bash_completion.d/$commandName for system wide tab-completion of paratask commands.")
            out.println()

            out.println("_${commandName}FileComplete()")
            out.println("{")
            out.println("    complete -F _${commandName}Complete $commandName")
            out.println("    return 0")
            out.println("}\n")

            out.println("_${commandName}Complete()")
            out.println("{")
            out.println("    local taskName cur prev")
            out.println("    COMPREPLY=()")
            out.println("    _get_comp_words_by_ref cur prev")

            out.println("    if [ \"\${COMP_CWORD}\" == 1 ]")
            out.println("    then")
            out.println("        COMPREPLY=( \$( compgen -W '${TaskRegistry.allTasks().map { it.taskD.name }.sorted().joinToString(separator = " ")}' -- \$cur ) )")
            out.println("    else")
            out.println("        taskName=\${COMP_WORDS[1]}")
            out.println("        case \$taskName in")

            TaskRegistry.allTasks().sortedBy { it.taskD.name }.forEach { task ->
                out.println("            ${task.taskD.name})")
                val parameterNames = task.taskD.valueParameters().map { "--${it.name}" }
                // val booleanParameters = booleanParameters(task)
                // TODO Check if boolean parameter was prev, in which case, prompt using parameter names.

                val choiceParameters = choiceParameters(task)
                val fileParameters = fileParameters(task)
                val directoryParameters = directoryParameters(task)

                out.println("                if [[ \"\$prev\" == --* ]] ; then")

                if (choiceParameters.isNotEmpty() || fileParameters.isNotEmpty() || directoryParameters.isNotEmpty()) {
                    out.println("                case \$prev in")
                    choiceParameters.forEach { (name, choiceParameter) ->
                        out.println("                    --$name)")
                        out.println("                        COMPREPLY=(${choiceParameter.choiceKeys().joinToString(separator = " ")})")
                        out.println("                        return 0")
                        out.println("                        ;;")
                    }
                    if (fileParameters.isNotEmpty()) {
                        out.println("                    ${fileParameters.map { "--" + it.first }.joinToString(separator = "|")})")
                        out.println("                        complete -F _${commandName}FileComplete -o filenames $commandName")
                        out.println("                        return 124")
                        out.println("                        ;;")
                    }
                    if (directoryParameters.isNotEmpty()) {
                        out.println("                    ${directoryParameters.map { "--" + it.first }.joinToString(separator = "|")})")
                        out.println("                        complete -F _${commandName}FileComplete -o dirnames $commandName")
                        out.println("                        return 124")
                        out.println("                        ;;")
                    }
                    out.println("                esac") // End Case parameter name
                } else {
                    out.println("                    # No choice or file parameters")
                    out.println("                    COMPREPLY=()")
                }
                out.println("                else")
                out.println("                    COMPREPLY=( \$( compgen -W '${parameterNames.joinToString(separator = " ")}' -- \$cur) )")
                out.println("                    return 0")
                out.println("                fi")
                out.println("                ;;\n")

            }
            out.println("        esac") // End case TASK
            out.println("        ")
            out.println("    fi")
            out.println("}\n")

            out.println("complete -F _${commandName}Complete $commandName")

        } finally {
            if (out != System.out) {
                out.close()
            }
        }
    }

    inline fun <reified T : Parameter> multipleParametersInners(task: Task): List<Pair<String, T>> {
        return task.taskD.valueParameters().filterIsInstance<MultipleParameter<*, *>>().filter { it.factory() is T }.map { Pair(it.name, it.factory() as T) }
    }

    fun choiceParameters(task: Task): List<Pair<String, ChoiceParameter<*>>> {
        return task.taskD.valueParameters().filterIsInstance<ChoiceParameter<*>>().map { Pair(it.name, it) } +
                multipleParametersInners<ChoiceParameter<*>>(task)
    }

    fun allFileParameters(task: Task): List<Pair<String, FileParameter>> {
        return task.taskD.valueParameters().filterIsInstance<FileParameter>().map { Pair(it.name, it) } +
                multipleParametersInners<FileParameter>(task)
    }

    fun fileParameters(task: Task): List<Pair<String, FileParameter>> {
        return allFileParameters(task).filter { it.second.expectFile != false }
    }

    fun directoryParameters(task: Task): List<Pair<String, FileParameter>> {
        return allFileParameters(task).filter { it.second.expectFile == false }
    }

    fun booleanParameters(task: Task): List<Pair<String, BooleanParameter>> {
        return task.taskD.valueParameters().filterIsInstance<BooleanParameter>().map { Pair(it.name, it) } +
                multipleParametersInners<BooleanParameter>(task)
    }
}


fun main(args: Array<String>) {
    TaskParser(GenerateCompletionTask()).go(args)
}
