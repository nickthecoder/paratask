package uk.co.nickthecoder.paratask

import uk.co.nickthecoder.paratask.parameters.FileParameter
import uk.co.nickthecoder.paratask.parameters.StringParameter
import uk.co.nickthecoder.paratask.util.child
import uk.co.nickthecoder.paratask.util.currentDirectory
import java.io.PrintStream

/**
 * Generates a bash script suitable for adding to /etc/bash_completion.d, which aids prompting of the
 * paratask script (which is the main entry point into the application, and can launch any of the
 * registered tasks or tools).
 *
 * See Gnu's documentation on how command completion works :
 * https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html
 */
class GenerateCompletionTask : AbstractTask() {

    val commandNameP = StringParameter("commandName", value = "paratask")
    val commandName by commandNameP

    val outputFileP = FileParameter("output", expectFile = true, mustExist = null,
            value = currentDirectory.child("src", "dist", "bash_complete.d", "paratask-static"))

    override val taskD = TaskDescription("generateCompletion")
            .addParameters(commandNameP, outputFileP)

    lateinit var out: PrintStream

    override fun run() {
        if (outputFileP.value == null) {
            out = System.out
        } else {
            out = PrintStream(outputFileP.value)
        }
        try {
            out.println("# Generated by : paratask ${taskD.name} --commandName ${commandName}")
            out.println("# Copy to /etc/bash_completion.d/$commandName for system wide tab-completion of paratask commands.")
            out.println()

            GenerateTaskCompletionTask.generateFileComplete(out, commandName)

            out.println("_${commandName}Complete()")
            out.println("{")
            out.println("    local taskName cur prev")
            out.println("    COMPREPLY=()")
            out.println("    _get_comp_words_by_ref cur prev\n")

            out.println("    if [ \"\${COMP_CWORD}\" == 1 ]")
            out.println("    then")
            out.println("        COMPREPLY=( \$( compgen -W '${TaskRegistry.allTasks().map { it.taskD.name }.sorted().joinToString(separator = " ")}' -- \$cur ) )")
            out.println("    else")
            out.println("        taskName=\${COMP_WORDS[1]}")
            out.println("        case \$taskName in")

            TaskRegistry.allTasks().sortedBy { it.taskD.name }.forEach { task ->
                out.println("            ${task.taskD.name})\n")
                GenerateTaskCompletionTask.generateForTask(out, task, commandName)
                out.println("                ;;\n")
            }

            out.println("        esac") // End case TASK
            out.println("        ")
            out.println("    fi")
            out.println("}\n")

            out.println("complete -F _${commandName}Complete $commandName")

        } finally {
            if (out != System.out) {
                out.close()
            }
        }
    }

}


fun main(args: Array<String>) {
    TaskParser(GenerateCompletionTask()).go(args)
}
